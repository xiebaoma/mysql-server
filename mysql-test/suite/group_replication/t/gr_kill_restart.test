################################################################################
# This test validates that in Group Replication, when the primary node leaves
# and quickly rejoins the group, the replication cluster remains operational
# and does not enter an unusable state. A primary should be elected, and
# the previously departed node should be permitted to rejoin the group.
#
# Test:
# 0. The test requires 3 servers: M1 , M2 and M3.
# 1. Prepare all the servers for crash such that when server crashes
#    the crashed node joins the group immediately.
# 2. Start all servers.
# 3. Kill and re-start primary server 3 times.
# 4. Cleanup.
################################################################################

# Due to kill avoid valgind.
--source include/not_valgrind.inc
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Prepare all the servers for crash such that when server crashes
--echo #    the crashed node joins the group immediately.
--let $loop=1
while ($loop < 4)
{
  --let $rpl_connection_name= server$loop
  --source include/rpl_connection.inc
  # Suppressions
  set session sql_log_bin=0;
  call mtr.add_suppression("Members removed from the group*");
  call mtr.add_suppression("Member with address*");
  call mtr.add_suppression("\\[GCS\\]*");
  call mtr.add_suppression("The group_replication_group_name option is mandatory");
  call mtr.add_suppression("Unable to start Group Replication on boot");
  set session sql_log_bin=1;

  --disable_query_log
  --eval SET PERSIST group_replication_group_name= "$group_replication_group_name"
  --eval SET PERSIST group_replication_local_address= @@GLOBAL.group_replication_local_address
  --eval SET PERSIST group_replication_group_seeds= @@GLOBAL.group_replication_group_seeds
  --eval SET PERSIST group_replication_communication_stack= @@GLOBAL.group_replication_communication_stack
  --enable_query_log
  --inc $loop
}
--echo
--echo ############################################################
--echo # 2. Start all servers.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo # 3. Kill and re-start primary server 3 times.
--let $loop=3
while ($loop)
{
  --echo #### $loop ####
  --source include/gr_find_a_primary.inc
  --let $rpl_connection_name= $group_replication_primary_connection_out_var
  --source include/rpl_connection.inc

  --source include/kill_and_restart_mysqld.inc
  --let $rpl_server_number= $group_replication_primary_connection_number_out_var
  --source include/rpl_reconnect.inc
  --let $group_replication_member_state= ONLINE
  --let $wait_timeout= 300
  --source include/gr_wait_for_member_state.inc
  --let $group_replication_number_of_members = 3
  --let $wait_timeout= 300
  --source include/gr_wait_for_number_of_members.inc
  --dec $loop
}
--echo
--echo ############################################################
--echo # 4. Cleanup.
--let $loop=3
while ($loop)
{
  --let $rpl_connection_name= server$loop
  --source include/rpl_connection.inc
  --disable_query_log
  RESET PERSIST IF EXISTS group_replication_group_name;
  RESET PERSIST IF EXISTS group_replication_local_address;
  RESET PERSIST IF EXISTS group_replication_group_seeds;
  RESET PERSIST IF EXISTS group_replication_communication_stack;
  --enable_query_log
  --source include/stop_group_replication.inc
  --dec $loop
}
--source include/group_replication_end.inc
